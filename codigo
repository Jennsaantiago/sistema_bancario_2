from abc import ABC, abstractclassmethod, abstractproperty
import textwrap


class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def add_conta(self, conta):
        self.contas.append(conta)


class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf


class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = '0001'
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self.saldo
        saldo_insuficiente = valor > saldo

        if saldo_insuficiente:
            print('!!! Saldo insuficiente, tente novamente !!!')

        elif valor > 0:
            if valor >= 10 and valor % 10 == 0:
                self._saldo -= valor
                print(f'**** Saque de R${valor:.2f} realizado com sucesso! ****')
                return True

        else:
            print('!!! Opção inválida, tente novamente !!!')

        return False

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print('\n*** Depósito realizado com sucesso! ***')
        else:
            print('!!! Opção inválida, tente novamente !!!')
            return False

        return True


class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes if transacao['tipo'] == 'Saque']
        )

        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self._limite_saques

        if excedeu_limite:
            print('!!! Limite de saque excedido, tente novamente !!!')

        elif excedeu_saques:
            print('!!! Número de saques diários excedito !!!')

        else:
            return super().sacar(valor)

        return False

    def __str__(self):
        return f"""\
        Agência:\t{self.agencia}
            C/C:\t\t{self.numero}
            Titular:\t{self.cliente.nome}
        """


class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacoes(self, transacao):
        self._transacoes.append(
            {
                'tipo': transacao.__class__.__name__,
                'valor': transacao.valor,
            }
        )


class Transacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        pass


class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)


class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)


def menu():
    menu = """\n
    ================ MENU ================
    [1]\tDepósito
    [2]\tSaque
    [3]\tExtrato
    [4]\tNovo Cliente
    [5]\tNova Conta
    [6]\tListar Contas
    [0]\tSair 
    """
    return input(textwrap.dedent(menu))


def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None


def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print('\n||| Não possui conta vinculada a esse cliente! |||')
        return

    return cliente.contas[0]


def depositar(clientes):
    cpf = input('Informe o CPF do cliente: ')
    cliente = filtrar_cliente(cpf, clientes)

    if not clientes:
        print('\n||| Cliente não encontrado! |||')
        return

    valor = float(input('Informe o valor do depósito: '))
    transacao = Deposito(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)


def sacar(clientes):
    cpf = input('Informe o CPF do cliente: ')
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print('\n||| Cliente não encontrado! |||')
        return

    valor = float(input('Informe o valor do saque: '))
    transacao = Saque(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)


def exibir_extrato(clientes):
    cpf = input('Informe o CPF do cliente: ')
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print('\n||| Cliente não encontrado! |||')
        return

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    print('\n########## EXTRATO ##########')
    transacoes = conta.historico.transacoes

    extrato = ""
    if not transacoes:
        extrato = '\nNão foram realizadas movimentações.'
    else:
        for transacao in transacoes:
            extrato += f'\n{transacao['tipo']}:\n\tR${transacao['valor']:.2f}'

    print(extrato)
    print(f'\nSaldo:\t\tR$ {conta.saldo:.2f}')
    print('#################################')


def criar_cliente(clientes):
    cpf = input('Informe o CPF (somente números): ')
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print('\n||| Já existe cliente com esse CPF! |||')
        return

    nome = input('Informe o nome completo: ')
    data_nascimento = input('Informe a data de nascimento (dd-mm-aaaa): ')
    endereco = input('Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ')

    cliente = PessoaFisica(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)

    clientes.append(cliente)

    print('\n@@@ Cliente criado com sucesso! @@@')


def criar_conta(numero_conta, clientes, contas):
    cpf = input('Informe o CPF do cliente: ')
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print('\n||| Cliente não encontrado, criação de conta encerrada! |||')
        return

    conta = ContaCorrente.nova_conta(cliente=cliente, numero=numero_conta)
    contas.append(conta)
    cliente.contas.append(conta)

    print('\n@@@ Conta criada com sucesso! @@@')


def listar_contas(contas):
    for conta in contas:
        print('=' * 100)
        print(textwrap.dedent(str(conta)))


def main():
    contas = []
    clientes = []

    while True:
        opcao = menu()

        if opcao == '1':
            depositar(clientes)

        elif opcao == '2':
            sacar(clientes)


        elif opcao == '3':
            exibir_extrato(clientes)

        elif opcao == '4':
            criar_cliente(clientes)

        elif opcao == '5':
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)

        elif opcao == '6':
            listar_contas(contas)

        elif opcao == '0':
            break

        else:
            print("\n||| Operação inválida, por favor selecione novamente a operação desejada. |||")


main()
